{"remainingRequest":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/src/components/search/logView.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/src/components/search/logView.vue","mtime":1630482556916},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgovKiAuYWNlX2VkaXRvciAuYWNlX21hcmtlci1sYXllciAuYWNlX3NlbGVjdGlvbiB7CiAgICBiYWNrZ3JvdW5kOiAjZmJkZTg2OGEgIWltcG9ydGFudDsKfQouYWNlX2VkaXRvciAuYWNlX21hcmtlci1sYXllciAuYWNlX2FjdGl2ZS1saW5lIHsKICAgIGJhY2tncm91bmQ6ICNmYmRlODY4YSAhaW1wb3J0YW50Owp9ICovCi8qIGFjZSBmaW5kIGhpZ2hsaWdodCAqLwouYWNlX2VkaXRvciAuYWNlX21hcmtlci1sYXllciAuYWNlX3NlbGVjdGVkLXdvcmQgewogICAgYmFja2dyb3VuZDogI2ZiZGU4NjhhICFpbXBvcnRhbnQ7CiAgICBib3JkZXI6IDFweCBzb2xpZCAvKltbYmFzZS1jb2xvcl1dKi8gI2YzZjVmOCAhaW1wb3J0YW50Owp9Cg=="},{"version":3,"sources":["logView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"logView.vue","sourceRoot":"src/components/search","sourcesContent":["<template>\n    <el-container style=\"height: calc(100% - 85px);\">\n        <el-header style=\"height:30px;line-height:30px;padding:0px;\">\n            <span style=\"font-weight: 900;\">{{model.id}} / {{model.field}} / {{model.file}}</span>\n            <el-dropdown style=\"padding-left:10px;float:right;\">\n                <span class=\"el-dropdown-link\">\n                    <svg-icon icon-class=\"theme\"/>\n                </span>\n                <el-dropdown-menu slot=\"dropdown\">\n                    <el-dropdown-item v-for=\"group in editor.theme.list\" :key=\"group.name\">\n                        <el-dropdown @command=\"onToggleTheme\">\n                            <span class=\"el-dropdown-link\">\n                            {{ group.name }}\n                            <i class=\"el-icon-arrow-down el-icon--right\"></i>\n                            </span>\n                            <el-dropdown-menu slot=\"dropdown\">\n                                <el-dropdown-item\n                                    v-for=\"item in group.items\"\n                                    :key=\"item.name\"\n                                    :command=\"item.name\">{{ item.name }}</el-dropdown-item>\n                                </el-dropdown-menu>\n                        </el-dropdown>\n                    </el-dropdown-item>\n                </el-dropdown-menu>\n            </el-dropdown>\n        </el-header>\n        <el-main :loading=\"editor.loading\" style=\"padding:0px;overflow:hidden;\">\n            <Editor\n                v-model=\"editor.data\"\n                @init=\"onEditorInit\"\n                :lang=\"editor.lang.value\"\n                :theme=\"editor.theme.value\"\n                width=\"99.8%\"\n                height=\"20vh\"\n                style=\"border:1px solid #f2f2f2;\"\n                ref=\"editor\"></Editor>\n        </el-main>\n    </el-container>\n</template>\n\n<script>\nimport _ from 'lodash';\n\nexport default{\n    props: {\n        model: Object\n    },\n    data(){\n        return {\n            dragging: false,\n            editor: {\n                data: null,\n                loading: false,\n                lang: {\n                    value: \"text\",\n                    list: []\n                },\n                theme: {\n                    value: \"chrome\",\n                    list: this.m3.EDITOR_THEME\n                }\n            }\n        }\n    },\n    watch: {\n        'model.words':{\n            handler(val){\n                \n                if(_.isEmpty(val)) return false;\n\n                setTimeout(()=>{\n                    let keywords = new RegExp(val.join(\"|\"),\"g\");\n                    this.$refs.editor.editor.findAll(keywords,{\n                        caseSensitive: false,\n                        wholeWord: true,\n                        regExp: true\n                    });\n                },1000)\n            }\n        },\n        model(){\n            this.init();\n        }\n    },\n    components:{\n        Editor:require(\"vue2-ace-editor\")\n    },\n    mounted(){\n        this.init();\n\n        this.eventHub.$on(\"WINDOW-RESIZE-EVENT\",()=>{\n            this.$refs.editor.editor.resize();\n        }); \n    },\n    methods: {\n        onEditorInit(){\n            require('brace/ext/searchbox');\n            require(\"brace/ext/language_tools\"); //language extension prerequsite...\n            require(`brace/mode/${this.editor.lang.value}`); //language\n            require(`brace/snippets/${this.editor.lang.value}`); //snippet\n            require(`brace/theme/${this.editor.theme.value}`); //language\n        },\n        onToggleTheme(val){\n            require(`brace/theme/${val}`); //language\n            this.editor.theme.value = val;\n        },\n        init(){\n            this.editor.loading = true;\n            let param = encodeURIComponent(JSON.stringify( this.model ));\n\n            this.m3.callFS(\"/matrix/m3mcc/searchBitlogByTerm.js\",param).then(rtn=>{\n                this.editor.data = this.arrayToCsv(rtn.message.result);\n                this.editor.loading = false;\n            }).catch(()=>{\n                this.editor.loading = false;\n            })\n        },\n        arrayToCsv(data){\n                    \n            let lineArray = [];\n            _.forEach(data, (infoArray)=> {\n                let valid = (new Date(infoArray[0])).getTime() > 0;\n                \n                if(valid){\n                    this.$set(infoArray, 0, this.moment(infoArray[0]).format('YYYY-MM-DD HH:mm:ss.SSS'));\n                }\n\n                let line = infoArray.join(\", \");\n                lineArray.push(line);\n            });\n            \n            return lineArray.join(\"\\n\");\n            \n        },\n        arrayToJson(data){\n            \n            this.$set(this.dt,'rows',[]);\n\n            _.forEach(data, (v, index)=> {\n                \n                let valid = (new Date(v[0])).getTime() > 0;\n                let time = \"\";\n\n                if(valid){\n                    time = this.moment(v[0]).format('YYYY-MM-DD HH:mm:ss.SSS');\n                }\n\n                this.dt.rows.push( {index: index+1, time: time, msg: v.slice(3).join(\", \"), file:v[1], num:v[2]} );\n            });\n            \n        },\n        markByTerm(str){\n            let finalStr = str;\n            let term = this.options.term.split(\",\");\n            \n            _.forEach(term,(v)=>{\n                \n                if(_.isEmpty(v)) return;\n\n                let reg = new RegExp(v, 'gim');\n                finalStr = finalStr.replace(reg, function(s){ return '<mark style=\"padding:3px;\">'+s+'</mark>'; });\n            })\n\n            return finalStr;\n        }\n    }\n}\n</script>\n\n<style>\n    /* .ace_editor .ace_marker-layer .ace_selection {\n        background: #fbde868a !important;\n    }\n    .ace_editor .ace_marker-layer .ace_active-line {\n        background: #fbde868a !important;\n    } */\n    /* ace find highlight */\n    .ace_editor .ace_marker-layer .ace_selected-word {\n        background: #fbde868a !important;\n        border: 1px solid /*[[base-color]]*/ #f3f5f8 !important;\n    }\n</style>\n"]}]}