{"remainingRequest":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/src/components/layout/SideBar.vue?vue&type=template&id=74b7f7c7&scoped=true&","dependencies":[{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/src/components/layout/SideBar.vue","mtime":1630075982968},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3mcc/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}